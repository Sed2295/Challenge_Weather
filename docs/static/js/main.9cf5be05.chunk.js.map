{"version":3,"sources":["components/helpers/getForecast.js","components/Table.js","components/City.js","components/helpers/getWeather.js","components/Info.js","components/hooks/useGetWeather.js","components/WeatherApp.js","index.js"],"names":["getForecast","city","a","url","fetch","res","json","datos","filterForecast","regex","arr","list","forEach","item","dt_txt","match","push","day","temp","main","humidity","wind","speed","dates","split","undefined","Table","ciudad","date","className","scope","City","card","useState","cityx","setCityx","useEffect","then","data","data2","Object","values","length","map","index","getWeather","name","tempe","parseInt","Info","state","setstate","useGetWeather","selectedCard","setSelectedCard","onClick","WeatherApp","cit","element","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.9cf5be05.chunk.js","sourcesContent":["export const getForecast = async(city) => {\r\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=455fde1c7e835780be24c20c008a06f9`;\r\n    const res = await fetch(url);\r\n    const datos = await res.json();\r\n    return filterForecast(datos);\r\n}\r\nconst filterForecast = (datos) => {\r\n    \r\n    const regex = /\\d{4}-\\d{2}-\\d{2}\\s(06|12|18)/;\r\n    const arr = [];\r\n    datos.list.forEach((item) => {\r\n        if (item.dt_txt.match(regex)) {\r\n            arr.push({\r\n               day:item.dt_txt,\r\n               temp: item.main.temp,\r\n               humidity: item.main.humidity,\r\n               wind: item.wind.speed\r\n            })\r\n        }\r\n    })\r\n    //Ordering by day\r\n    const dates = {};\r\n    arr.forEach((item) => {\r\n        let day = item.day.split(\" \")[0];\r\n        if (dates[day] === undefined) {\r\n            dates[day] = [];\r\n            dates[day].push(item);\r\n        }else {\r\n            dates[day].push(item);\r\n        }\r\n    })\r\n    return dates;\r\n}","import React from 'react';\r\nexport const Table = ({ciudad}) => {\r\n    const date = ciudad[0].day.split(' ')[0];\r\n    return (\r\n        <>\r\n            <h3 className=\"text-danger text-left fw-bold\">{date}</h3>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-hover  table-sm table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Horario</th>\r\n                                <th scope=\"col\">Temperatura</th>\r\n                                <th scope=\"col\">Humedad</th>\r\n                                <th scope=\"col\">Viento</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th scope=\"row\">06:00 Hrs</th>\r\n                                <td>{ciudad[0] ? `${ciudad[0].temp} °C` : 's/n datos'}</td>\r\n                                <td>{ciudad[0] ? `${ciudad[0].humidity} %` : 's/n datos'}</td>\r\n                                <td>{ciudad[0] ? `${ciudad[0].wind} m/s` : 's/n datos'}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope=\"row\">12:00 Hrs</th>\r\n                                <td>{ciudad[1] ? `${ciudad[1].temp} °C` : 's/n datos'}</td>\r\n                                <td>{ciudad[1] ? `${ciudad[1].humidity} %` : 's/n datos'}</td>\r\n                                <td>{ciudad[1] ? `${ciudad[1].wind} m/s` : 's/n datos'}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope=\"row\">18:00 Hrs</th>\r\n                                <td>{ciudad[2] ? `${ciudad[2].temp}°C` : 's/n datos'}</td>\r\n                                <td>{ciudad[2] ? `${ciudad[2].humidity} %` : 's/n datos'}</td>\r\n                                <td>{ciudad[2] ? `${ciudad[2].wind} m/s` : 's/n datos'}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>           \r\n        </>\r\n    )\r\n}\r\n","import React,{useEffect, useState} from 'react';\r\nimport { getForecast } from './helpers/getForecast';\r\nimport { Table } from './Table';\r\n\r\nexport const City = ({card}) => {\r\n    const [cityx, setCityx] = useState([]);\r\n    useEffect(() => {        \r\n        getForecast(card).then(data => {\r\n                var data2 = Object.values(data);\r\n                //console.log(data2);\r\n                setCityx(data2);\r\n            })    \r\n    }, [card])\r\n    return (\r\n        <>            \r\n            <div className=\"row mt-3\">\r\n                <h2 className=\"text-center\">Pronostico para los siguientes días</h2> \r\n            </div>\r\n            <div className=\"row justify-content-center mt-3\">\r\n                <div className=\"col-xs-8 col-sm-8 col-md-8 col-lg-8 col-xl-8\">\r\n                    <div className=\"card border-dark mb-3\">\r\n                        <div className=\"card-header bg-transparent border-dark text-secondary fs-4 fw-bold text-center\">{card.split(\",\")[0]}\r\n                        </div>\r\n                            <div className=\"card-body \">\r\n                                {\r\n                                    cityx.length && cityx.map((item,index)=>( \r\n                                        <Table key={index} ciudad={item}/>\r\n                                    ))\r\n                                }                                \r\n                            </div>                        \r\n                    </div>\r\n                </div> \r\n            </div>                                \r\n        </>\r\n    )\r\n}\r\n","export const getWeather = async(city) => {\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=455fde1c7e835780be24c20c008a06f9`;\r\n    const res = await fetch(url);\r\n    const datos = await res.json();\r\n    const {main:{temp,humidity},wind:{speed},name} = datos;\r\n    return {\r\n        name,\r\n        tempe : parseInt(temp),\r\n        humidity,\r\n        speed\r\n    }\r\n}","import React,{useState} from 'react';\r\nimport { City } from './City';\r\nimport { useGetWeather } from './hooks/useGetWeather';\r\n\r\nexport const Info = ({city}) => {\r\n    const {name,tempe,speed, humidity} = useGetWeather(city);\r\n    const [selectedCard,setSelectedCard] = useState(null);   \r\n    return(\r\n        <>     \r\n            <div className=\"col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2\">\r\n                <div className=\"card border-info mb-3 text-center cardss\" key={city} onClick={() => {setSelectedCard(city)}}>\r\n                    <div className=\"card-header bg-transparent border-info text-info fs-4 fw-bold\">{name}</div>\r\n                        <div className=\"card-body\">\r\n                            <p className=\"card-title fs-1 fw-bold\">{tempe}°C </p>                            \r\n                        </div>\r\n                    <div className=\"card-footer bg-transparent border-info\">Humedad: {humidity}% Viento: {speed}m/s</div>\r\n                </div>\r\n            </div>\r\n            {\r\n                selectedCard && <City card={selectedCard}/>             \r\n            }  \r\n        </>      \r\n    )\r\n}\r\n","import { useState,useEffect } from 'react';\r\nimport {getWeather} from '../helpers/getWeather';\r\n\r\nexport const useGetWeather = (city) => {\r\n    const [state, setstate] = useState({ciudad:{}});\r\n    useEffect( () => {\r\n        getWeather(city)\r\n            .then(ciudad => {\r\n                setstate({\r\n                    ...ciudad\r\n                })                             \r\n            })\r\n    },[city])\r\n    return state;\r\n}","import React,{useState} from 'react';\r\nimport { Info } from './Info';\r\nexport const WeatherApp = () => { \r\n    const [city] = useState(['Buenos Aires,ar','Bogota,col','Ciudad de Mexico,mx','Madrid,es','Lima,pe']);    \r\n    return (\r\n        <>            \r\n            <div className=\"row\">\r\n                <h1 className=\"text-success\">Weather App</h1> \r\n            </div>\r\n            <hr/>\r\n            <div className=\"row justify-content-center mt-3 informa\">         \r\n                {\r\n                    city.map(cit => (\r\n                        <Info key={cit} city={cit} />\r\n                    ))\r\n                }\r\n            </div>                       \r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { WeatherApp } from './components/WeatherApp';\nimport './index.css';\nconst element = document.getElementById('root');\n\nReactDOM.render(<WeatherApp/>,element);"],"sourceRoot":""}